plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '4.9.0'
    id 'checkstyle'
    id 'net.minecrell.licenser' version '0.4.1'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = archives_base_name + "+" + version
version = mod_version
group = maven_group

repositories {
    mavenLocal();
    maven { url "http://server.bbkr.space:8081/artifactory/libs-release/" }
    maven { url "https://minecraft.curseforge.com/api/maven" } //resolves REI
    maven { url "https://dl.bintray.com/shedaniel/autoconfig1u/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${minecraft_version}+build.${yarn_build}:v2"
    modApi "net.fabricmc:fabric-loader:${loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modCompile "io.github.cottonmc:Jankson-Fabric:${jankson_version}"
    include "io.github.cottonmc:Jankson-Fabric:${jankson_version}"

    // TODO: Temp modCompOnly
    modCompileOnly ("me.shedaniel:RoughlyEnoughItems:${rei_version}") {
        exclude(group: "blue.endless", module: "jankson")
        exclude(group: "io.github.prospector.modmenu", module: "ModMenu")
        exclude(module: "fabric-api")
    }
    
    implementation "com.google.code.findbugs:jsr305:3.0.2"
}

processResources {
    inputs.property "version", version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

checkstyle {
    configFile = rootProject.file("checkstyle.xml")
    toolVersion = '8.25'
}

license {
    header = file('LICENSE')
    include '**/*.java'
    style.java = 'BLOCK_COMMENT'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact("${buildDir.absolutePath}/libs/${archivesBaseName}-${version}.jar") {
                classifier null
                builtBy remapJar
            }

            artifact("${buildDir.absolutePath}/libs/${archivesBaseName}-${version}-dev.jar") {
                classifier "dev"
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
}

if (file('private.gradle').exists()) {
    apply(from: 'private.gradle')
}

artifactory {
    if (ext.has("artifactoryUsername")) {
        contextUrl = 'http://server.bbkr.space:8081/artifactory/'
        publish {
            repository {
                if (version.contains("SNAPSHOT")) {
                    repoKey = 'libs-snapshot-local'
                } else {
                    repoKey = 'libs-release-local'
                }

                username = artifactoryUsername
                password = artifactoryPassword
            }
            defaults {
                publications('maven')

                publishArtifacts = true
                publishPom = true
            }
        }
    } else {
        println "Missing Artifactory username (and password)"
    }
}

artifactoryPublish.dependsOn build
